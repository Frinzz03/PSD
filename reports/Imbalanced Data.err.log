Traceback (most recent call last):
  File "/usr/local/lib/python3.12/dist-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.12/dist-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/dist-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/lib/python3.12/dist-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from imblearn.over_sampling import ADASYN
from collections import Counter

# Data preparation
nt = X.copy()
ns = y.copy()

print("Distribusi awal:", Counter(ns))

class_counts = Counter(ns)
print("Class counts:", class_counts)

# Urutkan kelas dari yang paling sedikit ke paling banyak
sorted_classes = sorted(class_counts.items(), key=lambda x: x[1])
print("Sorted classes by count:", sorted_classes)

# Coba ADASYN bertahap untuk kelas minoritas
for i, (cls, count) in enumerate(sorted_classes[:-1]):  # Skip kelas mayoritas
    if count > 1:  # Hanya untuk kelas dengan cukup samples
        n_neighbors = min(5, count - 1)  # Pastikan n_neighbors aman

        print(f"\nüìä Processing class '{cls}' (count: {count}) with n_neighbors={n_neighbors}")

        try:
            adasyn = ADASYN(
                n_neighbors=n_neighbors,
                sampling_strategy={cls: count + 10}  # Naikkan 10 sampel
            )
            nt, ns = adasyn.fit_resample(nt, ns)
            print(f"‚úÖ Success for class '{cls}'")
            print(f"   New distribution: {Counter(ns)}")
        except Exception as e:
            print(f"‚ùå Failed for class '{cls}': {e}")
            continue

print(f"\nüéØ Final distribution: {sorted(Counter(ns).items())}")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m/tmp/ipython-input-3269223312.py[0m in [0;36m<cell line: 0>[0;34m()[0m
[1;32m      4[0m [0;31m# Data preparation[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0mnt[0m [0;34m=[0m [0mX[0m[0;34m.[0m[0mcopy[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0mns[0m [0;34m=[0m [0my[0m[0;34m.[0m[0mcopy[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;34m[0m[0m
[1;32m      8[0m [0mprint[0m[0;34m([0m[0;34m"Distribusi awal:"[0m[0;34m,[0m [0mCounter[0m[0;34m([0m[0mns[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'y' is not defined

